import os
from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from datetime import datetime
from google.cloud import texttospeech
from dotenv import load_dotenv
load_dotenv()

os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "gcp-key.json"

OUTPUT_DIR = "./static/tts"
VOICE_NAME = "ko-KR-Standard-A"
os.makedirs(OUTPUT_DIR, exist_ok=True)

router = APIRouter(prefix="/tts", tags=["Text-to-Speech"])

class TTSRequest(BaseModel):
    text: str
    voice: str | None = None

@router.post("/synthesize")
async def synthesize_tts(request: TTSRequest):
    if not request.text.strip():
        raise HTTPException(status_code=400, detail="ÌÖçÏä§Ìä∏Í∞Ä ÎπÑÏñ¥ ÏûàÏäµÎãàÎã§.")

    try:
        client = texttospeech.TextToSpeechClient()

        MAX_TTS_LENGTH = 5000
        safe_text = request.text[:MAX_TTS_LENGTH]
        print(f"üìù [TTS ÏöîÏ≤≠ ÌÖçÏä§Ìä∏] {safe_text[:300]}...")

        synthesis_input = texttospeech.SynthesisInput(text=safe_text)

        voice_config = texttospeech.VoiceSelectionParams(
            language_code="ko-KR",
            name=request.voice or VOICE_NAME,
            ssml_gender=texttospeech.SsmlVoiceGender.NEUTRAL
        )

        audio_config = texttospeech.AudioConfig(
            audio_encoding=texttospeech.AudioEncoding.LINEAR16
        )

        response = client.synthesize_speech(
            input=synthesis_input,
            voice=voice_config,
            audio_config=audio_config
        )

        if len(response.audio_content) < 500:
            raise HTTPException(status_code=500, detail="TTS ÏùëÎãµÏù¥ ÎÑàÎ¨¥ ÏßßÏäµÎãàÎã§.")

        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S_%f")
        filename = f"tts_{timestamp}.wav"
        file_path = os.path.join(OUTPUT_DIR, filename)

        with open(file_path, "wb") as out:
            out.write(response.audio_content)

        if not os.path.exists(file_path) or os.path.getsize(file_path) < 1000:
            raise HTTPException(status_code=500, detail="TTS ÌååÏùº Ï†ÄÏû• Ïã§Ìå® ÎòêÎäî ÌååÏùºÏù¥ ÎÑàÎ¨¥ ÏûëÏäµÎãàÎã§.")

        return {"message": "ÏùåÏÑ± ÏÉùÏÑ± ÏÑ±Í≥µ", "file_url": f"/static/tts/{filename}"}

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"TTS Ï≤òÎ¶¨ Ïã§Ìå®: {e}")
